/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package entregafinalsmm;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.QuadCurve2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import sm.cse.graphics.MiElipse2D;

import sm.cse.graphics.MyLine;
import sm.cse.graphics.MiFigura2D;
import sm.cse.graphics.MiLinea2D;
import sm.cse.graphics.MiQuadCurve2D;
import sm.cse.graphics.MiRectangle2D;
import sm.cse.graphics.MiTrazo2D;

/**
 *
 * @author carlos
 */
public class Lienzo2D extends javax.swing.JPanel {
    
    
    private ArrayList<Shape> vShape;
    private ArrayList<MiFigura2D> vFig;
    private boolean relleno = false, transparencia = false, suave = false;
    private boolean mover = false;
    private Color color = Color.BLACK;
    private Stroke stroke;
    private float patron[] = {1.0f};
    private Tool tool = Tool.TRAZO;
    private Composite comp;

    
    private Point p1 = new Point(-50,-50), p2 = new Point(-50,-50);
    private Point p3;
    
    private Shape actual;
    private MiFigura2D fig;
    private RenderingHints render;
    

    /**
     * Creates new form Lienzo2D
     */
    public Lienzo2D() {
        initComponents();
        actual = new MyLine(new Point2D.Float(-10,-10),new Point2D.Float(-10,-10));
        fig = null;
        vShape = new ArrayList();
        vFig = new ArrayList();
        stroke = new BasicStroke(3.0f, BasicStroke.CAP_ROUND,
                            BasicStroke.JOIN_MITER, 1.0f,
                            patron, 0.0f);
        comp = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
        render = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
                                    RenderingHints.VALUE_ANTIALIAS_ON);
    }
    
    // GETTERS Y SETTERS

    
    // HACER QUE CAMBIE PARA LA FIGURA SELECCIONADA
    public boolean getRelleno() {
        //return fig.getRelleno();
        return this.relleno;
    }

    public void setRelleno(boolean relleno) {
        //this.fig.setRelleno(relleno);
        this.relleno = relleno;
        this.repaint();
    }

    public Color getColor() {
        //return this.fig.getColor();
        return this.color;
    }

    public void setColor(Color color) {
        //this.fig.setColor(color);
        this.color = color;
        System.out.println("Cambio de color ha llegado");
        this.repaint();
    }

    public Tool getTool() {
        return tool;
    }

    public void setTool(Tool tool) {
        this.tool = tool;
    }

    public void setStroke(float grosor) {
        stroke = new BasicStroke(grosor, BasicStroke.CAP_ROUND,
                            BasicStroke.JOIN_MITER, 1.0f,
                            patron, 0.0f);
        //this.fig.setStroke(stroke);
        this.repaint();
    }
    
    public void setTransparencia(boolean t){
        //this.fig.setTransparencia(t);
        this.transparencia = t;
        this.repaint();
    }
    
    public boolean getTransparencia(){
        //return this.fig.getTransparencia();
        return this.transparencia;
    }
    
    public void setSuavizado(boolean s){
        //this.fig.setSuave(s);
        this.suave = s;
        this.repaint();
    }
    
    public boolean getSuavizado(){
        //return this.fig.getSuave();
        return this.suave;
    }
    
    public void setMover(boolean m){
        this.mover = m;
    }
    
    public boolean getMover(){
        return this.mover;
    }
    
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2d=(Graphics2D)g;
        
        for (MiFigura2D f: vFig){
            f.draw(g2d);
        }
        if (fig != null){
            fig.draw(g2d);
        }
        
    }
    
    public void addShape(Shape s){
        vShape.add(s);
    }
    public void addFig(MiFigura2D f){
        vFig.add(f);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
		if (!mover){
                    
                    p1 = evt.getPoint();
        
                    if (tool == Tool.TRAZO){
			GeneralPath trazo = new GeneralPath();
                        trazo.moveTo(p1.x, p1.y);
                        //actual = trazo;
                        fig = new MiTrazo2D(trazo);
                    }
		}
		else{
			Point2D aux = evt.getPoint();
			
                        for (int i = 0; i < vFig.size(); i++){
                            if (vFig.get(i).contains(aux))
                                fig = vFig.get(i);
                        }
		}
                
                //CAMBIAR IMPLEMENTACIÓN
                // CREAR AQUÍ LOS OBJETOS PORQUE SINO PETA
                // Y LUEGO ACTUALIZAR EN EL DRAGGED
		
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged

        if (mover){
            
            if (fig instanceof MiLinea2D){
                MiLinea2D aux = (MiLinea2D)fig;
                MyLine l = (MyLine)aux.getFigura();
                l.setLine(evt.getPoint().x, evt.getPoint().y, evt.getPoint().x+(l.x2-l.x1), evt.getPoint().y+(l.y2-l.y1));
                
            }
            
            else if (fig instanceof MiRectangle2D){
                MiRectangle2D aux = (MiRectangle2D)fig;
                Rectangle2D r = (Rectangle2D)aux.getFigura();
                r.setFrame(evt.getPoint().x, evt.getPoint().y, r.getWidth(), r.getHeight());
            }
            
            else if(fig instanceof MiElipse2D){
                MiElipse2D aux = (MiElipse2D)fig;
                Ellipse2D e = (Ellipse2D)aux.getFigura();
                e.setFrame(evt.getPoint().x, evt.getPoint().y, e.getWidth(), e.getHeight());
            }
            
            else if(fig instanceof MiTrazo2D){
                MiTrazo2D aux = (MiTrazo2D) fig;
                GeneralPath p = (GeneralPath)aux.getFigura();
                AffineTransform at;
                at = AffineTransform.getTranslateInstance(evt.getX() - p.getCurrentPoint().getX(), evt.getY() - p.getCurrentPoint().getY());
                p.transform(at);
                
            }
            
            else if (fig instanceof MiQuadCurve2D){
                // TODO: Arreglar esto
                MiQuadCurve2D aux = (MiQuadCurve2D)fig;
                QuadCurve2D q = (QuadCurve2D) aux.getFigura();
                Point2D p = evt.getPoint();
                double diffX = (p.getX()-q.getP1().getX());
                double diffY = (p.getY()-q.getP1().getY());
                Point2D ctr = new Point2D.Double(q.getCtrlPt().getX()+diffX, q.getCtrlPt().getY()+diffY);
                Point2D np2 = new Point2D.Double(q.getP2().getX()+diffX, q.getP2().getY()+diffY);
                q.setCurve(p, ctr, np2);
               
            }
	}
        
        else{
            
            switch(tool){
                    
                case TRAZO:
                    p2 = evt.getPoint();
                    //GeneralPath trazo = (GeneralPath)actual;
                    MiTrazo2D trazo = (MiTrazo2D)fig;
                    
                    trazo.setColor(color);
                    trazo.setComposite(comp);
                    trazo.setPatron(patron);
                    trazo.setRelleno(relleno);
                    trazo.setStroke(stroke);
                    trazo.setSuave(suave);
                    trazo.setTransparencia(transparencia);
                    
                    GeneralPath p = (GeneralPath)trazo.getFigura();
                    
                    p.lineTo(p2.x, p2.y);
                    trazo = new MiTrazo2D(p);
                    break;
                
               case LINEA:
                    p2 = evt.getPoint();
                    
                    fig = new MiLinea2D(new MyLine(p1,p2));
                    MiLinea2D l = (MiLinea2D)fig;
                    
                    l.setColor(color);
                    l.setComposite(comp);
                    l.setPatron(patron);
                    l.setRelleno(relleno);
                    l.setStroke(stroke);
                    l.setSuave(suave);
                    l.setTransparencia(transparencia);
                    
                    l = new MiLinea2D(new MyLine(p1,p2));
                    break;
                
             case RECTANGULO:
                    p2 = evt.getPoint();
                    
                    fig = new MiRectangle2D(new Rectangle2D.Double(p1.x, p1.y, 0, 0));
                    MiRectangle2D r = (MiRectangle2D)fig;
                    
                    r.setColor(color);
                    r.setComposite(comp);
                    r.setPatron(patron);
                    r.setRelleno(relleno);
                    r.setStroke(stroke);
                    r.setSuave(suave);
                    r.setTransparencia(transparencia);
                    
                    ((Rectangle2D)r.getFigura()).setFrameFromDiagonal(p1, p2);
                    
                    break;
            
              case ELIPSE:
                    p2 = evt.getPoint();
                    Ellipse2D elip = new Ellipse2D.Float(p1.x, p1.y, 0, 0);
                    elip.setFrameFromDiagonal(p1, p2);
                    actual = elip;
                    break;
                
               case CURVA:
                    p2 = evt.getPoint();
                    p3 = p2;
                    QuadCurve2D curva = new QuadCurve2D.Double(p1.x, p1.y, p3.x, p3.y, p2.x, p2.y);
                    actual = curva;
                    break;
                }   
        }
             
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        this.addShape(actual);
        this.addFig(fig);
        this.repaint();
        actual = new MyLine(new Point2D.Float(-10,-10),new Point2D.Float(-10,-10));
        fig = null;
    }//GEN-LAST:event_formMouseReleased

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
